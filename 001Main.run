reset;

include 003modelfile.mod;

#SELECT TASK
#task = 1: solve and simulate with manually defined partition
#task = 2: find partition with largest network measure
#task = 3: find single subnetwork with largest network measure
#task = 4: solve and simulate for all partitions
##################
	let task := 1;
##################

#SELECT DATA FILE
#datatype = 1: small running example, see "002datafileSRE.dat"
#datatype = 2: hub-and-spoke, H&S, see "002datafileHS.dat"
#datatype = 3: simple bus line, SBL, see "002datafileSBL.dat"
#datatype = 4: consecutive bus line, CBL, see "002datafileCBL.dat"
#datatype = 5: real bus line, RBL, see "002datafileRBL.dat"
#datatype = 6: example for non-equivalence of ALPs, see "002datafileNE.dat"
##################
	let datatype := 3;
##################

if datatype = 1 then {data 002datafileSRE.dat;}
if datatype = 2 then {data 002datafileHS.dat;}
if datatype = 3 then {data 002datafileSBL.dat;}
if datatype = 4 then {data 002datafileCBL.dat;}
if datatype = 5 then {data 002datafileRBL.dat;}
if datatype = 6 then {data 002datafileNE.dat;}

#OTHER SETTINGS
#qBar: size of subnetworks
#S: number of simulation runs
#alp: may be 
#	'Pprime': 	reduction P'_NSEP, 
#	'H':		heuristic reduction H_NSEP
#	'P': 		exact P_NSEP using a state-space reduction
#Attention: 'P' needs much computating power, especially if J is large!
#primaldual: may be
#	'primal': 	solve primal P', H, P
#	'dual': 	solve dual D', D^H, D
#the experiments in the paper are done with 'primal'
##################
	let qBar := 2; #not used for task 1
	let S := 10; #not used for task 2 and 3
	let alp := 'H'; #not used for task 2, 3 and 4
	let primaldual := 'primal';  
##################

#SETTINGS FOR TASK 1
#define the number N of subnetworks
#and the elements of \cal{I}_n
##################
	if task = 1 then {
		let N := 4;
		#let Icaln[1] := {3,4};
		let Icaln[1] := {5,6};
		let Icaln[2] := {1,8};
		let Icaln[3] := {2,7};
		let Icaln[4] := {3,4};
	}
##################


#----------------------------------------------------
#TASK 1: SOLVE AND SIMULATE USING THE ABOVE PARTITION
#----------------------------------------------------

if task = 1 then {

	#solve linear program and simulate policy
	include 004solveAndSimulate.run;
	
	#output
	display upperbound; #optimal value of linear program
	display revenue; #average revenue from policy simulation
	display standarderror; #standard error of average revenue
	display computingtime; #time used for solving linear program
}


#----------------------------------------------------
#TASK 2: FIND PARTITION WITH LARGEST NETWORK MEASURE
#----------------------------------------------------

if task = 2 then {
	
	solve DNM; #solve SPL for computing network measure
	let {i in Ical} Woverline[i] := WNM[1,i,c[i]];
	let {t in Tcal, i in 1..I, j in Jcal, u in 0..1} betaoverline[t,i,j,u] := betaNM[t,i,j,u];
	
	#compute auxiliary sets used for enumerating all partitions or all subnetworks
	include 004enumerateAllSubsetsAndPartitions.run;
	
	let N := ceil(I/qBar);
	let maxM := -Infinity;
	let {n in 1..N} IcalnMaxM[n] := {};
	
	#go through all partitions and find the partition with the largest network measure
	for {IcalPsiRest in Pcal[I mod qBar,I], ptildePsi in PcalTilde} {
		let {n in 1..N} Icaln[n] := IcalnAllPartitions[IcalPsiRest,ptildePsi,n];
		include 004determineNetworkMeasure.run;
		if Mpartition >= maxM then {
			let {n in 1..N} IcalnMaxM[n] := Icaln[n];
			let maxM := Mpartition;
		}
	}
	let {n in 1..N} Icaln[n] := IcalnMaxM[n];
	
	#output
	display Icaln;
}


#-------------------------------------------------
#TASK 3: FIND SUBSET WITH SMALLEST NETWORK MEASURE
#-------------------------------------------------

if task = 3 then {
	
	solve DNM; #solve SPL for computing network measure
	let {i in Ical} Woverline[i] := WNM[1,i,c[i]];
	let {t in Tcal, i in 1..I, j in Jcal, u in 0..1} betaoverline[t,i,j,u] := betaNM[t,i,j,u];
	
	#compute auxiliary sets used for enumerating all partitions or all subnetworks
	include 004enumerateAllSubsetsAndPartitions.run;
	
	let N := 1;
	let maxM := -Infinity;
	let IcalnMaxM[1] := {};
	
	#go through all subnetworks and find the subnetwork with the largest network measure
	for {IcalnPsi in Pcal[qBar,I]} {
		let Icaln[1] := IcalnAllSubsets[IcalnPsi];
		include 004determineNetworkMeasure.run;
		if Mpartition >= maxM then {
			let IcalnMaxM[1] := Icaln[1];
			let maxM := Mpartition;
		}
	}
	let Icaln[1] := IcalnMaxM[1];
	
	#output
	display Icaln[1];
}


#---------------------------------------------
#TASK 4: SOLVE AND SIMULATE FOR ALL PARTITIONS
#---------------------------------------------

if task = 4 then {
	
	let alp := 'Pprime';
	
	solve DNM; #solve SPL for computing network measure
	let {i in Ical} Woverline[i] := WNM[1,i,c[i]];
	let {t in Tcal, i in 1..I, j in Jcal, u in 0..1} betaoverline[t,i,j,u] := betaNM[t,i,j,u];
	
	#compute auxiliary sets used for enumerating all partitions or all subnetworks
	include 004enumerateAllSubsetsAndPartitions.run;
	
	let N := ceil(I/qBar);
	printf "%s,%s,%s,%s\n" , 'network measure' , 'upper bound' , 'revenue' , 'standard error' > ./000correlation.txt;
	
	#go through all partitions and compute upper bound and average revenue
	for {IcalPsiRest in Pcal[I mod qBar,I], ptildePsi in PcalTilde} {
		let {n in 1..N} Icaln[n] := IcalnAllPartitions[IcalPsiRest,ptildePsi,n];
		include 004determineNetworkMeasure.run;
		display Icaln;
		include 004solveAndSimulate.run;
		
		#output
		printf "%f,%f,%f,%f\n" , Mpartition , upperbound , revenue , standarderror > ./000correlation.txt;
	}		
}

